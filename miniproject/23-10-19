# -*- coding: utf-8 -*-

#importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.svm import SVC
from tkinter import messagebox
from sklearn.externals import joblib
from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

from yellowbrick.classifier import ConfusionMatrix
x=None
y=None
x_train=None
y_train=None
x_test=None
y_test=None
classifier=None
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import GridSearchCV
def svm_build(filename):

    global x,y,x_train,y_train,x_test,y_test,classifier
    #importing the dataset
    dataset = pd.read_csv("datasets/phishcoop.csv")
    dataset = dataset.drop('id', 1) #removing unwanted column
    x = dataset.iloc[: , :-1].values
    y = dataset.iloc[:, -1:].values

    #spliting the dataset into training set and test set
    #from sklearn.cross_validation import train_test_split
    x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.25, random_state =0 )

    #applying grid search to find best performing parameters 
    #from sklearn.model_selection import GridSearchCV
    parameters = [{'C':[1, 10, 100, 1000], 'gamma': [ 0.1, 0.2,0.3, 0.5]}]
    grid_search = GridSearchCV(SVC(kernel='rbf' ),  parameters,cv =5, n_jobs= -1)
    grid_search.fit(x_train, y_train)

    #printing best parameters 
    print("Best Accurancy =" +str( grid_search.best_score_))
    print("best parameters =" + str(grid_search.best_params_)) 
    classifier = SVC(C=1000, kernel = 'rbf', gamma = 0.2 , random_state = 0)
    messagebox.showinfo("SVM", "Build completed")
def svm_train():
    global classifier,x_train,y_train
   
    #fitting kernel SVM  with best parameters calculated
    classifier.fit(x_train, y_train)
    messagebox.showinfo("SVM", "Training completed")
    
def svm_test():
    global classifier,x_test,y_test 
    #predicting the tests set result
    y_pred = classifier.predict(x_test)

    #confusion matrix
    from sklearn.metrics import confusion_matrix
    cm = confusion_matrix(y_test, y_pred)
    print(cm)
    print('True positive = ', cm[0][0])
    print('False positive = ', cm[0][1])
    print('False negative = ', cm[1][0])
    print('True negative = ', cm[1][1])

    #pickle file joblib
    joblib.dump(classifier, 'final_models/svm_final.pkl')
    messagebox.showinfo("SVM", "test completed")
def svm_visualize():
    global classifier,x_test,y_test,x_train,y_train
    cm = ConfusionMatrix(classifier, classes=[-1,1])

    # Fit fits the passed model. This is unnecessary if you pass the visualizer a pre-fitted model
    cm.fit(x_train, y_train)

    # To create the ConfusionMatrix, we need some test data. Score runs predict() on the data
    # and then creates the confusion_matrix from scikit-learn.
    cm.score(x_test, y_test)

    # How did we do?
    cm.poof()
